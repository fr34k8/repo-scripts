#!/bin/bash

TOPDIR=$(realpath $(dirname $0)/..)
source "${TOPDIR}"/scripts/common.sh

if ! type -P ekeyword > /dev/null ; then
	ewarn "This script requires the use of ekeyword, please emerge"
	ewarn "app-portage/gentoolkit-dev to continue."
	exit 1
fi

if ! type -P wget > /dev/null ; then
	ewarn "This script requires the use of wget, please emerge"
	ewarn "net-misc/wget to continue."
	exit 1
fi

if [[ -z ${1} ]] ; then
	einfo
	einfo "usage: ecopy <category>/<package>"
	einfo "- you can also specify a specific version, using the '=' prefix"
	einfo "and appending a version"
	einfo
	einfo "ecopy is a best effort script only. It doesn't guarantee a working"
	einfo "result"
	exit 0
fi

_geix() {
	geix --exact \
		--nocolor \
		--pure-packages \
		"$@"
}

# mangle user input
catpkg="${1#=}"
catpkg="${catpkg%-[0-9]*}"

# try to find atom regardless of keywords
read CATEGORY PN < <(_geix --format "<category> <name>\n" ${catpkg})

if [[ -z ${PN} ]]; then
	eerror "Cannot find package ${catpkg}"
	exit 1
fi

if [[ ${1:0:1} == "=" ]]; then
	PVR="${1#=${catpkg}-}"
else
	read PVR < <(_geix --stable --format "<bestversion:PVERSION>\n" ${catpkg})

	if [[ -z ${PVR} ]]; then
		export ACCEPT_KEYWORDS=~$(portageq envvar ARCH)
		read PVR < <(_geix --format "<bestversion:PVERSION>\n" ${catpkg})
	fi

	if [[ -z ${PVR} ]]; then
		eerror "No atom found for ${catpkg} and ACCEPT_KEYWORDS=${ACCEPT_KEYWORDS}"
		exit 1
	fi
fi

ebuild="${PN}-${PVR}.ebuild"

if [[ ! -e "${GENTOO_CACHE}/${catpkg}/${ebuild}" ]]; then
	eerror "${CATEGORY}/${PN}-${PVR} is not in upstream repository"
	exit 1
fi

einfo "Found atom ${CATEGORY}/${PN}-${PVR}"
einfo "Fetching files from ${GENTOO_CACHE} ..."

# create directories
mkdir -p "${TOPDIR}"/{eclass,licenses,profiles,metadata}
mkdir -p "${TOPDIR}"/${catpkg}
pushd "${TOPDIR}"/${catpkg} > /dev/null

# add CATEGORY to profiles
echo ${CATEGORY} >> "${TOPDIR}"/profiles/categories
sort -u "${TOPDIR}"/profiles/categories -o "${TOPDIR}"/profiles/categories

# fetch metadata.xml
if [[ ! -e metadata.xml ]]; then
	fcopy ${catpkg}/metadata.xml
fi

# get the ebuild
fcopy ${catpkg}/${ebuild}

# source ebuild to get metadata
PF="${ebuild/.ebuild}"
P="${PF%-r[1-9]*}"
PN="${P%-*}"
PV="${P/${PN}-}"

inherit() {
	INHERIT="$@"
}

source ${ebuild} 2> /dev/null

# get the patches. assumed that every patch has FILESDIR in the line.
for i in $(eval echo $(grep FILESDIR ${ebuild} | grep -v '#.*FILESDIR' | sed -e 's:.*FILESDIR[}"]*/::' -e 's:"::g' -e "s:'::" -e "s:#.*::" -e "s: .*::")); do
	for j in "${GENTOO_CACHE}"/${catpkg}/files/${i}; do
		fcopy "${j#"${GENTOO_CACHE}"/}"
	done
done

if [[ -n ${PATCHES} ]]; then
	for i in "${PATCHES[@]}"; do
		fcopy "${catpkg}/files/${i}"
	done
fi

# apache modules
if [[ -n ${APACHE2_MOD_CONF} ]]; then
	fcopy "${catpkg}/files/${APACHE2_MOD_CONF}.conf"
fi

# emacs files
if [[ -n ${SITEFILE} ]]; then
	fcopy "${catpkg}/files/${SITEFILE}"
fi

# ruby files
if [[ -n ${RUBY_PATCHES} ]]; then
	for i in "${RUBY_PATCHES[@]}"; do
		fcopy "${catpkg}/files/${i}"
	done
fi

# some special cases
case ${catpkg} in
app-admin/eselect-blas)
	fcopy "${catpkg}/files/blas.eselect-${PV}"
	;;
app-admin/eselect-cblas)
	fcopy "${catpkg}/files/cblas.eselect-${PV}"
	;;
app-admin/eselect-lapack)
	fcopy "${catpkg}/files/lapack.eselect-${PV}"
	;;
app-admin/eselect-pinentry)
	fcopy "${catpkg}/files/pinentry.eselect-${PV}"
	;;
app-editors/vim)
	fcopy "${catpkg}/files/vim-completion"
	fcopy "${catpkg}/files/vimrc"
	;;
app-editors/vim-core)
	fcopy "${catpkg}/files/vimrc-r4"
	fcopy "${catpkg}/files/xxd-completion"
	;;
app-shells/bash)
	fcopy "${catpkg}/files/dot-bash_logout"
	fcopy "${catpkg}/files/dot-bash_profile"
	fcopy "${catpkg}/files/dot-bashrc"
	;;
net-fs/samba)
	fcopy "${catpkg}/files/3.6/lmhosts"
	fcopy "${catpkg}/files/3.6/samba.confd"
	fcopy "${catpkg}/files/3.6/samba.initd"
	fcopy "${catpkg}/files/3.6/samba.pam"
	fcopy "${catpkg}/files/3.6/smb.conf.default.patch"
	fcopy "${catpkg}/files/3.6/smbusers"
	fcopy "${catpkg}/files/3.6/swat.xinetd"
	fcopy "${catpkg}/files/3.6/system-auth-winbind.pam"
	fcopy "${catpkg}/files/samba-3.4.2-lib.tevent.python.mk"
	;;
net-fs/nfs-utils)
	fcopy "${catpkg}/files/nfs.confd"
	fcopy "${catpkg}/files/nfs.initd"
	fcopy "${catpkg}/files/nfsmount.confd"
	fcopy "${catpkg}/files/nfsmount.initd"
	fcopy "${catpkg}/files/rpc.gssd.initd"
	fcopy "${catpkg}/files/rpc.idmapd.initd"
	fcopy "${catpkg}/files/rpc.pipefs.initd"
	fcopy "${catpkg}/files/rpc.statd.initd"
	fcopy "${catpkg}/files/rpc.svcgssd.initd"
	;;
x11-apps/xinit)
	fcopy "${catpkg}/files/chooser.sh"
	;;
dev-libs/mpfr)
	fcopy "${catpkg}/files/3.1.1/patch01"
	fcopy "${catpkg}/files/3.1.1/patch02"
	;;
dev-lang/lua)
	fcopy "${catpkg}/files/lua-5.1-make-r1.patch"
	fcopy "${catpkg}/files/lua-5.1-make_static-r1.patch"
	fcopy "${catpkg}/files/lua-5.1-module_paths.patch"
	fcopy "${catpkg}/files/lua-5.1-readline.patch"
	;;
dev-lang/perl)
	fcopy "${catpkg}/files/eblits/common-v50160001.eblit"
	fcopy "${catpkg}/files/eblits/pkg_postinst-v50160001.eblit"
	fcopy "${catpkg}/files/eblits/pkg_postrm-v50160001.eblit"
	fcopy "${catpkg}/files/eblits/pkg_setup-v50160001.eblit"
	fcopy "${catpkg}/files/eblits/src_configure-v50160001.eblit"
	fcopy "${catpkg}/files/eblits/src_install-v50160001.eblit"
	fcopy "${catpkg}/files/eblits/src_prepare-v50160001.eblit"
	fcopy "${catpkg}/files/eblits/src_test-v50160001.eblit"
	;;
dev-lang/php)
	fcopy "${catpkg}/files/70_mod_php5.conf-apache2"
	;;
sys-devel/gcc)
	fcopy "${catpkg}/files/awk/fixlafiles.awk"
	fcopy "${catpkg}/files/awk/fixlafiles.awk-no_gcc_la"
	fcopy "${catpkg}/files/c89"
	fcopy "${catpkg}/files/c99"
	fcopy "${catpkg}/files/fix_libtool_files.sh"
	fcopy "${catpkg}/files/gcc-configure-LANG.patch"
	fcopy "${catpkg}/files/gcc-configure-texinfo.patch"
	;;
sys-libs/glibc)
	fcopy "${catpkg}/files/eblits/common.eblit"
	fcopy "${catpkg}/files/eblits/pkg_preinst.eblit"
	fcopy "${catpkg}/files/eblits/pkg_setup.eblit"
	fcopy "${catpkg}/files/eblits/src_compile.eblit"
	fcopy "${catpkg}/files/eblits/src_install.eblit"
	fcopy "${catpkg}/files/eblits/src_test.eblit"
	fcopy "${catpkg}/files/eblits/src_unpack.eblit"
	;;
dev-java/oracle-jdk-bin)
	fcopy "${catpkg}/files/oracle-jdk-bin-1.7.env"
	fcopy "${catpkg}/files/oracle-jdk-bin-1.8.env"
	;;
esac

# (re)fetch used eclasses/licenses
for i in ${INHERIT}; do
	fcopy "eclass/${i}.eclass"
	sed -i -e '/\$Header:/d' "${TOPDIR}/eclass/${i}.eclass"
	sed -i -e 's/^\(XORG_EAUTORECONF_ARCHES\)="\(.*\)"/\1=""/g' "${TOPDIR}/eclass/${i}.eclass"
done

for i in ${LICENSE}; do
	[[ ${i} == "(" || ${i} == ")" || ${i} == "||" ]] && continue
	fcopy "licenses/${i}"
done

setup_portdir

# reset keywords
einfo "Setting keywords to amd64 only ..."
if is_overlay; then
	"${TOPDIR}"/scripts/ekeyword.py ^all ~amd64 ${ebuild} >/dev/null
else
	"${TOPDIR}"/scripts/ekeyword.py ^all amd64 ${ebuild} >/dev/null
fi

# clean CVS headers
sed -i -e '3d' ${ebuild}
sed -i -e '2a# $Header: $' ${ebuild}

# update manifests
if [[ -z ${SKIP_REPOMAN} ]]; then
	einfo "Updating Manifest ..."
	repoman manifest > /dev/null

	einfo
	einfo "Running repoman to check for QA problems ..."
	repoman full

	# add ebuilds so repoman doesn't complain about it
	git add -A .
fi

if [[ ${1:0:1} == "=" && -z $EINFO_QUIET ]]; then
	line=$(printf "%-40s echo \"=\$1-%s\"\;\;" "$CATEGORY/$PN)" $PVR)
	sed -i -e "/^*)/i${line}" "${TOPDIR}"/profiles/releases/zentoo/eupdate.expand.sh
fi
