#!/bin/bash

TOPDIR=$(realpath $(dirname $0)/..)
source "${TOPDIR}"/scripts/common.sh

# sync gentoo repository
"${TOPDIR}"/scripts/sync-gentoo-cache

if ! type -P ekeyword > /dev/null ; then
	ewarn "This script requires the use of ekeyword, please emerge"
	ewarn "app-portage/gentoolkit-dev to continue."
	exit 1
fi

if ! type -P wget > /dev/null ; then
	ewarn "This script requires the use of wget, please emerge"
	ewarn "net-misc/wget to continue."
	exit 1
fi

if [[ -z ${1} ]] ; then
	einfo
	einfo "usage: ecopy <category>/<package>"
	einfo "- you can also specify a specific version, using the '=' prefix"
	einfo "and appending a version"
	einfo
	einfo "ecopy is a best effort script only. It doesn't guarantee a working"
	einfo "result"
	exit 0
fi

# mangle user input
catpkg="${1#=}"
catpkg="${catpkg%-[0-9]*}"

# try to find atom regardless of keywords
read CATEGORY PN < <(geix --format "<category> <name>\n" ${catpkg})

if [[ -z ${PN} ]]; then
	eerror "Cannot find package ${catpkg}"
	exit 1
fi

if [[ ${1:0:1} == "=" ]]; then
	PVR="${1#=${catpkg}-}"
else
	read PVR < <(geix --stable --format "<bestversion:VERSION>\n" ${catpkg})

	if [[ -z ${PVR} ]]; then
		eerror "No atom found for ${catpkg} and ACCEPT_KEYWORDS=${ACCEPT_KEYWORDS}"
		exit 1
	fi
fi

ebuild="${PN}-${PVR}.ebuild"

einfo "Found atom ${CATEGORY}/${PN}-${PVR}"
einfo "Fetching files from ${GENTOO_CACHE} ..."

# create directories
mkdir -p "${TOPDIR}"/{eclass,licenses,profiles,metadata}
mkdir -p "${TOPDIR}"/${catpkg}
pushd "${TOPDIR}"/${catpkg} > /dev/null

# add CATEGORY to profiles
echo ${CATEGORY} >> "${TOPDIR}"/profiles/categories
sort -u "${TOPDIR}"/profiles/categories -o "${TOPDIR}"/profiles/categories

# (re)fetch metadata.xml
if [[ ! -e metadata.xml ]]; then
	einfo "  - ${catpkg}/metadata.xml"
	cp "${GENTOO_CACHE}"/${catpkg}/metadata.xml metadata.xml
fi

# get the ebuild
einfo "  - ${catpkg}/${ebuild}"
cp -i "${GENTOO_CACHE}"/${catpkg}/${ebuild} ${ebuild}

# source ebuild to get metadata
PF="${ebuild/.ebuild}"
P="${PF%-r[1-9]*}"
PN="${P%-*}"
PV="${P/${PN}-}"

inherit() {
	INHERIT="$@"
}

source ${ebuild} 2> /dev/null

# get the patches. assumed that every patch has FILESDIR in the line.
for i in $(eval echo $(grep FILESDIR ${ebuild} | grep -v '#.*FILESDIR' | sed -e 's:.*FILESDIR[}"]*/::' -e 's:"::g' -e "s:'::" -e "s:#.*::" -e "s: .*::")); do
	mkdir -p "files/$(dirname ${i})"
	einfo "  - ${catpkg}/files/${i}"
	cp "${GENTOO_CACHE}/${catpkg}/files/${i}" "files/${i}"
done

# (re)fetch used eclasses/licenses
for i in ${INHERIT}; do
	einfo "  - eclass/${i}.eclass"
	cp "${GENTOO_CACHE}/eclass/${i}.eclass" "${TOPDIR}/eclass/${i}.eclass"
	sed -i -e '/\$Header:/d' "${TOPDIR}/eclass/${i}.eclass"
done

for i in ${LICENSE}; do
	einfo "  - licenses/${i}"
	cp "${GENTOO_CACHE}/licenses/${i}" "${TOPDIR}/licenses/${i}"
done

setup_portdir

# reset keywords
einfo "Setting keywords to amd64 only ..."
if is_overlay; then
	ekeyword ^all ~amd64 ${ebuild} >/dev/null
else
	ekeyword ^all amd64 ${ebuild} >/dev/null
fi

# clean CVS headers
sed -i -e '3d' ${ebuild}
sed -i -e '2a# $Header: $' ${ebuild}

# update manifests
einfo "Updating Manifest ..."
repoman manifest > /dev/null

# add ebuilds so repoman doesn't complain about it
git add -A

einfo
einfo "Running repoman to check for QA problems ..."
repoman full
